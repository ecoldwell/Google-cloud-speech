/*! @name videojs-errors @version 4.2.0 @license Apache-2.0 */
(function (videojs,QUnit,sinon) {
	'use strict';

	videojs = videojs && videojs.hasOwnProperty('default') ? videojs['default'] : videojs;
	QUnit = QUnit && QUnit.hasOwnProperty('default') ? QUnit['default'] : QUnit;
	sinon = sinon && sinon.hasOwnProperty('default') ? sinon['default'] : sinon;

	var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	var empty = {};

	var empty$1 = /*#__PURE__*/Object.freeze({
		default: empty
	});

	var minDoc = ( empty$1 && empty ) || empty$1;

	var topLevel = typeof commonjsGlobal !== 'undefined' ? commonjsGlobal :
	    typeof window !== 'undefined' ? window : {};


	var doccy;

	if (typeof document !== 'undefined') {
	    doccy = document;
	} else {
	    doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];

	    if (!doccy) {
	        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;
	    }
	}

	var document_1 = doccy;

	var version = "4.2.0";

	var cov_2gp6hwlpl7 = function () {
	  var path = '/Users/jforbes/git/videojs-errors/src/plugin.js',
	      hash = '200b33bf3069a3d28baf6afb7a008568559144cf',
	      Function = function () {}.constructor,
	      global = new Function('return this')(),
	      gcv = '__coverage__',
	      coverageData = {
	    path: '/Users/jforbes/git/videojs-errors/src/plugin.js',
	    statementMap: {
	      '0': {
	        start: {
	          line: 5,
	          column: 17
	        },
	        end: {
	          line: 5,
	          column: 46
	        }
	      },
	      '1': {
	        start: {
	          line: 6,
	          column: 23
	        },
	        end: {
	          line: 6,
	          column: 49
	        }
	      },
	      '2': {
	        start: {
	          line: 9,
	          column: 23
	        },
	        end: {
	          line: 9,
	          column: 63
	        }
	      },
	      '3': {
	        start: {
	          line: 12,
	          column: 17
	        },
	        end: {
	          line: 66,
	          column: 1
	        }
	      },
	      '4': {
	        start: {
	          line: 68,
	          column: 19
	        },
	        end: {
	          line: 329,
	          column: 1
	        }
	      },
	      '5': {
	        start: {
	          line: 72,
	          column: 20
	        },
	        end: {
	          line: 72,
	          column: 22
	        }
	      },
	      '6': {
	        start: {
	          line: 74,
	          column: 23
	        },
	        end: {
	          line: 85,
	          column: 3
	        }
	      },
	      '7': {
	        start: {
	          line: 75,
	          column: 4
	        },
	        end: {
	          line: 75,
	          column: 67
	        }
	      },
	      '8': {
	        start: {
	          line: 78,
	          column: 4
	        },
	        end: {
	          line: 84,
	          column: 7
	        }
	      },
	      '9': {
	        start: {
	          line: 79,
	          column: 18
	        },
	        end: {
	          line: 79,
	          column: 35
	        }
	      },
	      '10': {
	        start: {
	          line: 81,
	          column: 6
	        },
	        end: {
	          line: 83,
	          column: 7
	        }
	      },
	      '11': {
	        start: {
	          line: 82,
	          column: 8
	        },
	        end: {
	          line: 82,
	          column: 21
	        }
	      },
	      '12': {
	        start: {
	          line: 88,
	          column: 2
	        },
	        end: {
	          line: 88,
	          column: 17
	        }
	      },
	      '13': {
	        start: {
	          line: 91,
	          column: 23
	        },
	        end: {
	          line: 130,
	          column: 3
	        }
	      },
	      '14': {
	        start: {
	          line: 93,
	          column: 4
	        },
	        end: {
	          line: 93,
	          column: 33
	        }
	      },
	      '15': {
	        start: {
	          line: 94,
	          column: 4
	        },
	        end: {
	          line: 97,
	          column: 5
	        }
	      },
	      '16': {
	        start: {
	          line: 95,
	          column: 6
	        },
	        end: {
	          line: 95,
	          column: 25
	        }
	      },
	      '17': {
	        start: {
	          line: 96,
	          column: 6
	        },
	        end: {
	          line: 96,
	          column: 40
	        }
	      },
	      '18': {
	        start: {
	          line: 100,
	          column: 4
	        },
	        end: {
	          line: 109,
	          column: 13
	        }
	      },
	      '19': {
	        start: {
	          line: 103,
	          column: 6
	        },
	        end: {
	          line: 105,
	          column: 7
	        }
	      },
	      '20': {
	        start: {
	          line: 104,
	          column: 8
	        },
	        end: {
	          line: 104,
	          column: 15
	        }
	      },
	      '21': {
	        start: {
	          line: 107,
	          column: 6
	        },
	        end: {
	          line: 107,
	          column: 24
	        }
	      },
	      '22': {
	        start: {
	          line: 108,
	          column: 6
	        },
	        end: {
	          line: 108,
	          column: 37
	        }
	      },
	      '23': {
	        start: {
	          line: 111,
	          column: 4
	        },
	        end: {
	          line: 111,
	          column: 33
	        }
	      },
	      '24': {
	        start: {
	          line: 112,
	          column: 4
	        },
	        end: {
	          line: 123,
	          column: 24
	        }
	      },
	      '25': {
	        start: {
	          line: 115,
	          column: 6
	        },
	        end: {
	          line: 117,
	          column: 7
	        }
	      },
	      '26': {
	        start: {
	          line: 116,
	          column: 8
	        },
	        end: {
	          line: 116,
	          column: 15
	        }
	      },
	      '27': {
	        start: {
	          line: 119,
	          column: 6
	        },
	        end: {
	          line: 122,
	          column: 9
	        }
	      },
	      '28': {
	        start: {
	          line: 127,
	          column: 4
	        },
	        end: {
	          line: 129,
	          column: 5
	        }
	      },
	      '29': {
	        start: {
	          line: 128,
	          column: 6
	        },
	        end: {
	          line: 128,
	          column: 25
	        }
	      },
	      '30': {
	        start: {
	          line: 133,
	          column: 18
	        },
	        end: {
	          line: 142,
	          column: 3
	        }
	      },
	      '31': {
	        start: {
	          line: 136,
	          column: 4
	        },
	        end: {
	          line: 139,
	          column: 5
	        }
	      },
	      '32': {
	        start: {
	          line: 137,
	          column: 6
	        },
	        end: {
	          line: 137,
	          column: 35
	        }
	      },
	      '33': {
	        start: {
	          line: 138,
	          column: 6
	        },
	        end: {
	          line: 138,
	          column: 43
	        }
	      },
	      '34': {
	        start: {
	          line: 140,
	          column: 4
	        },
	        end: {
	          line: 140,
	          column: 33
	        }
	      },
	      '35': {
	        start: {
	          line: 141,
	          column: 4
	        },
	        end: {
	          line: 141,
	          column: 33
	        }
	      },
	      '36': {
	        start: {
	          line: 145,
	          column: 22
	        },
	        end: {
	          line: 178,
	          column: 3
	        }
	      },
	      '37': {
	        start: {
	          line: 146,
	          column: 18
	        },
	        end: {
	          line: 174,
	          column: 5
	        }
	      },
	      '38': {
	        start: {
	          line: 149,
	          column: 6
	        },
	        end: {
	          line: 171,
	          column: 7
	        }
	      },
	      '39': {
	        start: {
	          line: 151,
	          column: 21
	        },
	        end: {
	          line: 151,
	          column: 42
	        }
	      },
	      '40': {
	        start: {
	          line: 153,
	          column: 8
	        },
	        end: {
	          line: 161,
	          column: 9
	        }
	      },
	      '41': {
	        start: {
	          line: 156,
	          column: 10
	        },
	        end: {
	          line: 159,
	          column: 13
	        }
	      },
	      '42': {
	        start: {
	          line: 160,
	          column: 10
	        },
	        end: {
	          line: 160,
	          column: 17
	        }
	      },
	      '43': {
	        start: {
	          line: 164,
	          column: 8
	        },
	        end: {
	          line: 166,
	          column: 9
	        }
	      },
	      '44': {
	        start: {
	          line: 165,
	          column: 10
	        },
	        end: {
	          line: 165,
	          column: 32
	        }
	      },
	      '45': {
	        start: {
	          line: 168,
	          column: 8
	        },
	        end: {
	          line: 170,
	          column: 9
	        }
	      },
	      '46': {
	        start: {
	          line: 169,
	          column: 10
	        },
	        end: {
	          line: 169,
	          column: 32
	        }
	      },
	      '47': {
	        start: {
	          line: 173,
	          column: 6
	        },
	        end: {
	          line: 173,
	          column: 20
	        }
	      },
	      '48': {
	        start: {
	          line: 176,
	          column: 4
	        },
	        end: {
	          line: 176,
	          column: 27
	        }
	      },
	      '49': {
	        start: {
	          line: 177,
	          column: 4
	        },
	        end: {
	          line: 177,
	          column: 34
	        }
	      },
	      '50': {
	        start: {
	          line: 180,
	          column: 29
	        },
	        end: {
	          line: 196,
	          column: 3
	        }
	      },
	      '51': {
	        start: {
	          line: 181,
	          column: 19
	        },
	        end: {
	          line: 181,
	          column: 20
	        }
	      },
	      '52': {
	        start: {
	          line: 183,
	          column: 4
	        },
	        end: {
	          line: 183,
	          column: 14
	        }
	      },
	      '53': {
	        start: {
	          line: 186,
	          column: 4
	        },
	        end: {
	          line: 186,
	          column: 19
	        }
	      },
	      '54': {
	        start: {
	          line: 187,
	          column: 4
	        },
	        end: {
	          line: 195,
	          column: 7
	        }
	      },
	      '55': {
	        start: {
	          line: 188,
	          column: 26
	        },
	        end: {
	          line: 188,
	          column: 46
	        }
	      },
	      '56': {
	        start: {
	          line: 191,
	          column: 6
	        },
	        end: {
	          line: 194,
	          column: 7
	        }
	      },
	      '57': {
	        start: {
	          line: 192,
	          column: 8
	        },
	        end: {
	          line: 192,
	          column: 31
	        }
	      },
	      '58': {
	        start: {
	          line: 193,
	          column: 8
	        },
	        end: {
	          line: 193,
	          column: 23
	        }
	      },
	      '59': {
	        start: {
	          line: 198,
	          column: 25
	        },
	        end: {
	          line: 205,
	          column: 3
	        }
	      },
	      '60': {
	        start: {
	          line: 199,
	          column: 4
	        },
	        end: {
	          line: 204,
	          column: 5
	        }
	      },
	      '61': {
	        start: {
	          line: 200,
	          column: 6
	        },
	        end: {
	          line: 203,
	          column: 9
	        }
	      },
	      '62': {
	        start: {
	          line: 207,
	          column: 25
	        },
	        end: {
	          line: 274,
	          column: 3
	        }
	      },
	      '63': {
	        start: {
	          line: 208,
	          column: 18
	        },
	        end: {
	          line: 208,
	          column: 20
	        }
	      },
	      '64': {
	        start: {
	          line: 209,
	          column: 16
	        },
	        end: {
	          line: 209,
	          column: 30
	        }
	      },
	      '65': {
	        start: {
	          line: 210,
	          column: 20
	        },
	        end: {
	          line: 210,
	          column: 49
	        }
	      },
	      '66': {
	        start: {
	          line: 211,
	          column: 24
	        },
	        end: {
	          line: 211,
	          column: 26
	        }
	      },
	      '67': {
	        start: {
	          line: 215,
	          column: 4
	        },
	        end: {
	          line: 217,
	          column: 5
	        }
	      },
	      '68': {
	        start: {
	          line: 216,
	          column: 6
	        },
	        end: {
	          line: 216,
	          column: 13
	        }
	      },
	      '69': {
	        start: {
	          line: 219,
	          column: 4
	        },
	        end: {
	          line: 219,
	          column: 87
	        }
	      },
	      '70': {
	        start: {
	          line: 221,
	          column: 4
	        },
	        end: {
	          line: 225,
	          column: 5
	        }
	      },
	      '71': {
	        start: {
	          line: 222,
	          column: 6
	        },
	        end: {
	          line: 224,
	          column: 16
	        }
	      },
	      '72': {
	        start: {
	          line: 227,
	          column: 4
	        },
	        end: {
	          line: 233,
	          column: 5
	        }
	      },
	      '73': {
	        start: {
	          line: 228,
	          column: 27
	        },
	        end: {
	          line: 230,
	          column: 7
	        }
	      },
	      '74': {
	        start: {
	          line: 232,
	          column: 6
	        },
	        end: {
	          line: 232,
	          column: 80
	        }
	      },
	      '75': {
	        start: {
	          line: 235,
	          column: 20
	        },
	        end: {
	          line: 235,
	          column: 51
	        }
	      },
	      '76': {
	        start: {
	          line: 237,
	          column: 4
	        },
	        end: {
	          line: 237,
	          column: 44
	        }
	      },
	      '77': {
	        start: {
	          line: 238,
	          column: 4
	        },
	        end: {
	          line: 238,
	          column: 37
	        }
	      },
	      '78': {
	        start: {
	          line: 239,
	          column: 4
	        },
	        end: {
	          line: 244,
	          column: 14
	        }
	      },
	      '79': {
	        start: {
	          line: 246,
	          column: 22
	        },
	        end: {
	          line: 246,
	          column: 79
	        }
	      },
	      '80': {
	        start: {
	          line: 249,
	          column: 4
	        },
	        end: {
	          line: 267,
	          column: 5
	        }
	      },
	      '81': {
	        start: {
	          line: 250,
	          column: 6
	        },
	        end: {
	          line: 253,
	          column: 16
	        }
	      },
	      '82': {
	        start: {
	          line: 254,
	          column: 6
	        },
	        end: {
	          line: 254,
	          column: 40
	        }
	      },
	      '83': {
	        start: {
	          line: 255,
	          column: 6
	        },
	        end: {
	          line: 255,
	          column: 32
	        }
	      },
	      '84': {
	        start: {
	          line: 257,
	          column: 6
	        },
	        end: {
	          line: 257,
	          column: 87
	        }
	      },
	      '85': {
	        start: {
	          line: 259,
	          column: 23
	        },
	        end: {
	          line: 259,
	          column: 74
	        }
	      },
	      '86': {
	        start: {
	          line: 261,
	          column: 6
	        },
	        end: {
	          line: 263,
	          column: 9
	        }
	      },
	      '87': {
	        start: {
	          line: 262,
	          column: 8
	        },
	        end: {
	          line: 262,
	          column: 24
	        }
	      },
	      '88': {
	        start: {
	          line: 265,
	          column: 6
	        },
	        end: {
	          line: 265,
	          column: 40
	        }
	      },
	      '89': {
	        start: {
	          line: 266,
	          column: 6
	        },
	        end: {
	          line: 266,
	          column: 32
	        }
	      },
	      '90': {
	        start: {
	          line: 269,
	          column: 4
	        },
	        end: {
	          line: 271,
	          column: 5
	        }
	      },
	      '91': {
	        start: {
	          line: 270,
	          column: 6
	        },
	        end: {
	          line: 270,
	          column: 33
	        }
	      },
	      '92': {
	        start: {
	          line: 273,
	          column: 4
	        },
	        end: {
	          line: 273,
	          column: 56
	        }
	      },
	      '93': {
	        start: {
	          line: 273,
	          column: 36
	        },
	        end: {
	          line: 273,
	          column: 54
	        }
	      },
	      '94': {
	        start: {
	          line: 276,
	          column: 27
	        },
	        end: {
	          line: 284,
	          column: 3
	        }
	      },
	      '95': {
	        start: {
	          line: 277,
	          column: 4
	        },
	        end: {
	          line: 277,
	          column: 14
	        }
	      },
	      '96': {
	        start: {
	          line: 279,
	          column: 4
	        },
	        end: {
	          line: 279,
	          column: 37
	        }
	      },
	      '97': {
	        start: {
	          line: 280,
	          column: 4
	        },
	        end: {
	          line: 280,
	          column: 43
	        }
	      },
	      '98': {
	        start: {
	          line: 281,
	          column: 4
	        },
	        end: {
	          line: 281,
	          column: 39
	        }
	      },
	      '99': {
	        start: {
	          line: 282,
	          column: 4
	        },
	        end: {
	          line: 282,
	          column: 44
	        }
	      },
	      '100': {
	        start: {
	          line: 283,
	          column: 4
	        },
	        end: {
	          line: 283,
	          column: 53
	        }
	      },
	      '101': {
	        start: {
	          line: 286,
	          column: 23
	        },
	        end: {
	          line: 289,
	          column: 3
	        }
	      },
	      '102': {
	        start: {
	          line: 287,
	          column: 4
	        },
	        end: {
	          line: 287,
	          column: 23
	        }
	      },
	      '103': {
	        start: {
	          line: 288,
	          column: 4
	        },
	        end: {
	          line: 288,
	          column: 67
	        }
	      },
	      '104': {
	        start: {
	          line: 291,
	          column: 2
	        },
	        end: {
	          line: 291,
	          column: 57
	        }
	      },
	      '105': {
	        start: {
	          line: 291,
	          column: 36
	        },
	        end: {
	          line: 291,
	          column: 56
	        }
	      },
	      '106': {
	        start: {
	          line: 292,
	          column: 2
	        },
	        end: {
	          line: 292,
	          column: 67
	        }
	      },
	      '107': {
	        start: {
	          line: 292,
	          column: 30
	        },
	        end: {
	          line: 292,
	          column: 66
	        }
	      },
	      '108': {
	        start: {
	          line: 295,
	          column: 2
	        },
	        end: {
	          line: 305,
	          column: 4
	        }
	      },
	      '109': {
	        start: {
	          line: 296,
	          column: 4
	        },
	        end: {
	          line: 298,
	          column: 5
	        }
	      },
	      '110': {
	        start: {
	          line: 297,
	          column: 6
	        },
	        end: {
	          line: 297,
	          column: 29
	        }
	      },
	      '111': {
	        start: {
	          line: 299,
	          column: 4
	        },
	        end: {
	          line: 304,
	          column: 5
	        }
	      },
	      '112': {
	        start: {
	          line: 300,
	          column: 6
	        },
	        end: {
	          line: 300,
	          column: 32
	        }
	      },
	      '113': {
	        start: {
	          line: 301,
	          column: 6
	        },
	        end: {
	          line: 303,
	          column: 7
	        }
	      },
	      '114': {
	        start: {
	          line: 302,
	          column: 8
	        },
	        end: {
	          line: 302,
	          column: 29
	        }
	      },
	      '115': {
	        start: {
	          line: 309,
	          column: 2
	        },
	        end: {
	          line: 309,
	          column: 42
	        }
	      },
	      '116': {
	        start: {
	          line: 311,
	          column: 2
	        },
	        end: {
	          line: 311,
	          column: 40
	        }
	      },
	      '117': {
	        start: {
	          line: 312,
	          column: 2
	        },
	        end: {
	          line: 312,
	          column: 36
	        }
	      },
	      '118': {
	        start: {
	          line: 313,
	          column: 2
	        },
	        end: {
	          line: 313,
	          column: 41
	        }
	      },
	      '119': {
	        start: {
	          line: 314,
	          column: 2
	        },
	        end: {
	          line: 314,
	          column: 50
	        }
	      },
	      '120': {
	        start: {
	          line: 316,
	          column: 2
	        },
	        end: {
	          line: 318,
	          column: 5
	        }
	      },
	      '121': {
	        start: {
	          line: 317,
	          column: 4
	        },
	        end: {
	          line: 317,
	          column: 34
	        }
	      },
	      '122': {
	        start: {
	          line: 321,
	          column: 2
	        },
	        end: {
	          line: 323,
	          column: 3
	        }
	      },
	      '123': {
	        start: {
	          line: 322,
	          column: 4
	        },
	        end: {
	          line: 322,
	          column: 25
	        }
	      },
	      '124': {
	        start: {
	          line: 326,
	          column: 2
	        },
	        end: {
	          line: 326,
	          column: 33
	        }
	      },
	      '125': {
	        start: {
	          line: 328,
	          column: 2
	        },
	        end: {
	          line: 328,
	          column: 31
	        }
	      },
	      '126': {
	        start: {
	          line: 331,
	          column: 15
	        },
	        end: {
	          line: 333,
	          column: 1
	        }
	      },
	      '127': {
	        start: {
	          line: 332,
	          column: 2
	        },
	        end: {
	          line: 332,
	          column: 60
	        }
	      },
	      '128': {
	        start: {
	          line: 335,
	          column: 0
	        },
	        end: {
	          line: 341,
	          column: 3
	        }
	      },
	      '129': {
	        start: {
	          line: 336,
	          column: 2
	        },
	        end: {
	          line: 340,
	          column: 4
	        }
	      },
	      '130': {
	        start: {
	          line: 337,
	          column: 4
	        },
	        end: {
	          line: 339,
	          column: 6
	        }
	      },
	      '131': {
	        start: {
	          line: 344,
	          column: 0
	        },
	        end: {
	          line: 344,
	          column: 25
	        }
	      },
	      '132': {
	        start: {
	          line: 347,
	          column: 0
	        },
	        end: {
	          line: 347,
	          column: 33
	        }
	      }
	    },
	    fnMap: {
	      '0': {
	        name: '(anonymous_0)',
	        decl: {
	          start: {
	            line: 68,
	            column: 19
	          },
	          end: {
	            line: 68,
	            column: 20
	          }
	        },
	        loc: {
	          start: {
	            line: 68,
	            column: 45
	          },
	          end: {
	            line: 329,
	            column: 1
	          }
	        },
	        line: 68
	      },
	      '1': {
	        name: '(anonymous_1)',
	        decl: {
	          start: {
	            line: 74,
	            column: 23
	          },
	          end: {
	            line: 74,
	            column: 24
	          }
	        },
	        loc: {
	          start: {
	            line: 74,
	            column: 41
	          },
	          end: {
	            line: 85,
	            column: 3
	          }
	        },
	        line: 74
	      },
	      '2': {
	        name: '(anonymous_2)',
	        decl: {
	          start: {
	            line: 78,
	            column: 40
	          },
	          end: {
	            line: 78,
	            column: 41
	          }
	        },
	        loc: {
	          start: {
	            line: 78,
	            column: 45
	          },
	          end: {
	            line: 84,
	            column: 5
	          }
	        },
	        line: 78
	      },
	      '3': {
	        name: '(anonymous_3)',
	        decl: {
	          start: {
	            line: 91,
	            column: 23
	          },
	          end: {
	            line: 91,
	            column: 24
	          }
	        },
	        loc: {
	          start: {
	            line: 91,
	            column: 34
	          },
	          end: {
	            line: 130,
	            column: 3
	          }
	        },
	        line: 91
	      },
	      '4': {
	        name: '(anonymous_4)',
	        decl: {
	          start: {
	            line: 100,
	            column: 32
	          },
	          end: {
	            line: 100,
	            column: 33
	          }
	        },
	        loc: {
	          start: {
	            line: 100,
	            column: 43
	          },
	          end: {
	            line: 109,
	            column: 5
	          }
	        },
	        line: 100
	      },
	      '5': {
	        name: '(anonymous_5)',
	        decl: {
	          start: {
	            line: 112,
	            column: 32
	          },
	          end: {
	            line: 112,
	            column: 33
	          }
	        },
	        loc: {
	          start: {
	            line: 112,
	            column: 43
	          },
	          end: {
	            line: 123,
	            column: 5
	          }
	        },
	        line: 112
	      },
	      '6': {
	        name: '(anonymous_6)',
	        decl: {
	          start: {
	            line: 133,
	            column: 18
	          },
	          end: {
	            line: 133,
	            column: 19
	          }
	        },
	        loc: {
	          start: {
	            line: 133,
	            column: 29
	          },
	          end: {
	            line: 142,
	            column: 3
	          }
	        },
	        line: 133
	      },
	      '7': {
	        name: '(anonymous_7)',
	        decl: {
	          start: {
	            line: 145,
	            column: 22
	          },
	          end: {
	            line: 145,
	            column: 23
	          }
	        },
	        loc: {
	          start: {
	            line: 145,
	            column: 41
	          },
	          end: {
	            line: 178,
	            column: 3
	          }
	        },
	        line: 145
	      },
	      '8': {
	        name: '(anonymous_8)',
	        decl: {
	          start: {
	            line: 146,
	            column: 18
	          },
	          end: {
	            line: 146,
	            column: 19
	          }
	        },
	        loc: {
	          start: {
	            line: 146,
	            column: 29
	          },
	          end: {
	            line: 174,
	            column: 5
	          }
	        },
	        line: 146
	      },
	      '9': {
	        name: '(anonymous_9)',
	        decl: {
	          start: {
	            line: 180,
	            column: 29
	          },
	          end: {
	            line: 180,
	            column: 30
	          }
	        },
	        loc: {
	          start: {
	            line: 180,
	            column: 40
	          },
	          end: {
	            line: 196,
	            column: 3
	          }
	        },
	        line: 180
	      },
	      '10': {
	        name: '(anonymous_10)',
	        decl: {
	          start: {
	            line: 187,
	            column: 48
	          },
	          end: {
	            line: 187,
	            column: 49
	          }
	        },
	        loc: {
	          start: {
	            line: 187,
	            column: 59
	          },
	          end: {
	            line: 195,
	            column: 5
	          }
	        },
	        line: 187
	      },
	      '11': {
	        name: '(anonymous_11)',
	        decl: {
	          start: {
	            line: 198,
	            column: 25
	          },
	          end: {
	            line: 198,
	            column: 26
	          }
	        },
	        loc: {
	          start: {
	            line: 198,
	            column: 36
	          },
	          end: {
	            line: 205,
	            column: 3
	          }
	        },
	        line: 198
	      },
	      '12': {
	        name: '(anonymous_12)',
	        decl: {
	          start: {
	            line: 207,
	            column: 25
	          },
	          end: {
	            line: 207,
	            column: 26
	          }
	        },
	        loc: {
	          start: {
	            line: 207,
	            column: 36
	          },
	          end: {
	            line: 274,
	            column: 3
	          }
	        },
	        line: 207
	      },
	      '13': {
	        name: '(anonymous_13)',
	        decl: {
	          start: {
	            line: 261,
	            column: 35
	          },
	          end: {
	            line: 261,
	            column: 36
	          }
	        },
	        loc: {
	          start: {
	            line: 261,
	            column: 46
	          },
	          end: {
	            line: 263,
	            column: 7
	          }
	        },
	        line: 261
	      },
	      '14': {
	        name: '(anonymous_14)',
	        decl: {
	          start: {
	            line: 273,
	            column: 30
	          },
	          end: {
	            line: 273,
	            column: 31
	          }
	        },
	        loc: {
	          start: {
	            line: 273,
	            column: 36
	          },
	          end: {
	            line: 273,
	            column: 54
	          }
	        },
	        line: 273
	      },
	      '15': {
	        name: '(anonymous_15)',
	        decl: {
	          start: {
	            line: 276,
	            column: 27
	          },
	          end: {
	            line: 276,
	            column: 28
	          }
	        },
	        loc: {
	          start: {
	            line: 276,
	            column: 38
	          },
	          end: {
	            line: 284,
	            column: 3
	          }
	        },
	        line: 276
	      },
	      '16': {
	        name: '(anonymous_16)',
	        decl: {
	          start: {
	            line: 286,
	            column: 23
	          },
	          end: {
	            line: 286,
	            column: 24
	          }
	        },
	        loc: {
	          start: {
	            line: 286,
	            column: 44
	          },
	          end: {
	            line: 289,
	            column: 3
	          }
	        },
	        line: 286
	      },
	      '17': {
	        name: '(anonymous_17)',
	        decl: {
	          start: {
	            line: 291,
	            column: 24
	          },
	          end: {
	            line: 291,
	            column: 25
	          }
	        },
	        loc: {
	          start: {
	            line: 291,
	            column: 36
	          },
	          end: {
	            line: 291,
	            column: 56
	          }
	        },
	        line: 291
	      },
	      '18': {
	        name: '(anonymous_18)',
	        decl: {
	          start: {
	            line: 292,
	            column: 24
	          },
	          end: {
	            line: 292,
	            column: 25
	          }
	        },
	        loc: {
	          start: {
	            line: 292,
	            column: 30
	          },
	          end: {
	            line: 292,
	            column: 66
	          }
	        },
	        line: 292
	      },
	      '19': {
	        name: '(anonymous_19)',
	        decl: {
	          start: {
	            line: 295,
	            column: 25
	          },
	          end: {
	            line: 295,
	            column: 26
	          }
	        },
	        loc: {
	          start: {
	            line: 295,
	            column: 43
	          },
	          end: {
	            line: 305,
	            column: 3
	          }
	        },
	        line: 295
	      },
	      '20': {
	        name: '(anonymous_20)',
	        decl: {
	          start: {
	            line: 309,
	            column: 33
	          },
	          end: {
	            line: 309,
	            column: 34
	          }
	        },
	        loc: {
	          start: {
	            line: 309,
	            column: 39
	          },
	          end: {
	            line: 309,
	            column: 41
	          }
	        },
	        line: 309
	      },
	      '21': {
	        name: '(anonymous_21)',
	        decl: {
	          start: {
	            line: 316,
	            column: 15
	          },
	          end: {
	            line: 316,
	            column: 16
	          }
	        },
	        loc: {
	          start: {
	            line: 316,
	            column: 21
	          },
	          end: {
	            line: 318,
	            column: 3
	          }
	        },
	        line: 316
	      },
	      '22': {
	        name: '(anonymous_22)',
	        decl: {
	          start: {
	            line: 331,
	            column: 15
	          },
	          end: {
	            line: 331,
	            column: 16
	          }
	        },
	        loc: {
	          start: {
	            line: 331,
	            column: 33
	          },
	          end: {
	            line: 333,
	            column: 1
	          }
	        },
	        line: 331
	      },
	      '23': {
	        name: '(anonymous_23)',
	        decl: {
	          start: {
	            line: 335,
	            column: 29
	          },
	          end: {
	            line: 335,
	            column: 30
	          }
	        },
	        loc: {
	          start: {
	            line: 335,
	            column: 34
	          },
	          end: {
	            line: 341,
	            column: 1
	          }
	        },
	        line: 335
	      },
	      '24': {
	        name: '(anonymous_24)',
	        decl: {
	          start: {
	            line: 336,
	            column: 14
	          },
	          end: {
	            line: 336,
	            column: 15
	          }
	        },
	        loc: {
	          start: {
	            line: 336,
	            column: 25
	          },
	          end: {
	            line: 340,
	            column: 3
	          }
	        },
	        line: 336
	      }
	    },
	    branchMap: {
	      '0': {
	        loc: {
	          start: {
	            line: 9,
	            column: 23
	          },
	          end: {
	            line: 9,
	            column: 63
	          }
	        },
	        type: 'binary-expr',
	        locations: [{
	          start: {
	            line: 9,
	            column: 23
	          },
	          end: {
	            line: 9,
	            column: 45
	          }
	        }, {
	          start: {
	            line: 9,
	            column: 49
	          },
	          end: {
	            line: 9,
	            column: 63
	          }
	        }],
	        line: 9
	      },
	      '1': {
	        loc: {
	          start: {
	            line: 81,
	            column: 6
	          },
	          end: {
	            line: 83,
	            column: 7
	          }
	        },
	        type: 'if',
	        locations: [{
	          start: {
	            line: 81,
	            column: 6
	          },
	          end: {
	            line: 83,
	            column: 7
	          }
	        }, {
	          start: {
	            line: 81,
	            column: 6
	          },
	          end: {
	            line: 83,
	            column: 7
	          }
	        }],
	        line: 81
	      },
	      '2': {
	        loc: {
	          start: {
	            line: 94,
	            column: 4
	          },
	          end: {
	            line: 97,
	            column: 5
	          }
	        },
	        type: 'if',
	        locations: [{
	          start: {
	            line: 94,
	            column: 4
	          },
	          end: {
	            line: 97,
	            column: 5
	          }
	        }, {
	          start: {
	            line: 94,
	            column: 4
	          },
	          end: {
	            line: 97,
	            column: 5
	          }
	        }],
	        line: 94
	      },
	      '3': {
	        loc: {
	          start: {
	            line: 103,
	            column: 6
	          },
	          end: {
	            line: 105,
	            column: 7
	          }
	        },
	        type: 'if',
	        locations: [{
	          start: {
	            line: 103,
	            column: 6
	          },
	          end: {
	            line: 105,
	            column: 7
	          }
	        }, {
	          start: {
	            line: 103,
	            column: 6
	          },
	          end: {
	            line: 105,
	            column: 7
	          }
	        }],
	        line: 103
	      },
	      '4': {
	        loc: {
	          start: {
	            line: 103,
	            column: 10
	          },
	          end: {
	            line: 103,
	            column: 61
	          }
	        },
	        type: 'binary-expr',
	        locations: [{
	          start: {
	            line: 103,
	            column: 10
	          },
	          end: {
	            line: 103,
	            column: 24
	          }
	        }, {
	          start: {
	            line: 103,
	            column: 28
	          },
	          end: {
	            line: 103,
	            column: 43
	          }
	        }, {
	          start: {
	            line: 103,
	            column: 47
	          },
	          end: {
	            line: 103,
	            column: 61
	          }
	        }],
	        line: 103
	      },
	      '5': {
	        loc: {
	          start: {
	            line: 115,
	            column: 6
	          },
	          end: {
	            line: 117,
	            column: 7
	          }
	        },
	        type: 'if',
	        locations: [{
	          start: {
	            line: 115,
	            column: 6
	          },
	          end: {
	            line: 117,
	            column: 7
	          }
	        }, {
	          start: {
	            line: 115,
	            column: 6
	          },
	          end: {
	            line: 117,
	            column: 7
	          }
	        }],
	        line: 115
	      },
	      '6': {
	        loc: {
	          start: {
	            line: 115,
	            column: 10
	          },
	          end: {
	            line: 115,
	            column: 61
	          }
	        },
	        type: 'binary-expr',
	        locations: [{
	          start: {
	            line: 115,
	            column: 10
	          },
	          end: {
	            line: 115,
	            column: 24
	          }
	        }, {
	          start: {
	            line: 115,
	            column: 28
	          },
	          end: {
	            line: 115,
	            column: 43
	          }
	        }, {
	          start: {
	            line: 115,
	            column: 47
	          },
	          end: {
	            line: 115,
	            column: 61
	          }
	        }],
	        line: 115
	      },
	      '7': {
	        loc: {
	          start: {
	            line: 127,
	            column: 4
	          },
	          end: {
	            line: 129,
	            column: 5
	          }
	        },
	        type: 'if',
	        locations: [{
	          start: {
	            line: 127,
	            column: 4
	          },
	          end: {
	            line: 129,
	            column: 5
	          }
	        }, {
	          start: {
	            line: 127,
	            column: 4
	          },
	          end: {
	            line: 129,
	            column: 5
	          }
	        }],
	        line: 127
	      },
	      '8': {
	        loc: {
	          start: {
	            line: 127,
	            column: 8
	          },
	          end: {
	            line: 127,
	            column: 52
	          }
	        },
	        type: 'binary-expr',
	        locations: [{
	          start: {
	            line: 127,
	            column: 8
	          },
	          end: {
	            line: 127,
	            column: 22
	          }
	        }, {
	          start: {
	            line: 127,
	            column: 26
	          },
	          end: {
	            line: 127,
	            column: 52
	          }
	        }],
	        line: 127
	      },
	      '9': {
	        loc: {
	          start: {
	            line: 149,
	            column: 6
	          },
	          end: {
	            line: 171,
	            column: 7
	          }
	        },
	        type: 'if',
	        locations: [{
	          start: {
	            line: 149,
	            column: 6
	          },
	          end: {
	            line: 171,
	            column: 7
	          }
	        }, {
	          start: {
	            line: 149,
	            column: 6
	          },
	          end: {
	            line: 171,
	            column: 7
	          }
	        }],
	        line: 149
	      },
	      '10': {
	        loc: {
	          start: {
	            line: 153,
	            column: 8
	          },
	          end: {
	            line: 161,
	            column: 9
	          }
	        },
	        type: 'if',
	        locations: [{
	          start: {
	            line: 153,
	            column: 8
	          },
	          end: {
	            line: 161,
	            column: 9
	          }
	        }, {
	          start: {
	            line: 153,
	            column: 8
	          },
	          end: {
	            line: 161,
	            column: 9
	          }
	        }],
	        line: 153
	      },
	      '11': {
	        loc: {
	          start: {
	            line: 153,
	            column: 12
	          },
	          end: {
	            line: 155,
	            column: 33
	          }
	        },
	        type: 'binary-expr',
	        locations: [{
	          start: {
	            line: 153,
	            column: 12
	          },
	          end: {
	            line: 153,
	            column: 16
	          }
	        }, {
	          start: {
	            line: 154,
	            column: 12
	          },
	          end: {
	            line: 154,
	            column: 57
	          }
	        }, {
	          start: {
	            line: 155,
	            column: 12
	          },
	          end: {
	            line: 155,
	            column: 33
	          }
	        }],
	        line: 153
	      },
	      '12': {
	        loc: {
	          start: {
	            line: 164,
	            column: 8
	          },
	          end: {
	            line: 166,
	            column: 9
	          }
	        },
	        type: 'if',
	        locations: [{
	          start: {
	            line: 164,
	            column: 8
	          },
	          end: {
	            line: 166,
	            column: 9
	          }
	        }, {
	          start: {
	            line: 164,
	            column: 8
	          },
	          end: {
	            line: 166,
	            column: 9
	          }
	        }],
	        line: 164
	      },
	      '13': {
	        loc: {
	          start: {
	            line: 168,
	            column: 8
	          },
	          end: {
	            line: 170,
	            column: 9
	          }
	        },
	        type: 'if',
	        locations: [{
	          start: {
	            line: 168,
	            column: 8
	          },
	          end: {
	            line: 170,
	            column: 9
	          }
	        }, {
	          start: {
	            line: 168,
	            column: 8
	          },
	          end: {
	            line: 170,
	            column: 9
	          }
	        }],
	        line: 168
	      },
	      '14': {
	        loc: {
	          start: {
	            line: 191,
	            column: 6
	          },
	          end: {
	            line: 194,
	            column: 7
	          }
	        },
	        type: 'if',
	        locations: [{
	          start: {
	            line: 191,
	            column: 6
	          },
	          end: {
	            line: 194,
	            column: 7
	          }
	        }, {
	          start: {
	            line: 191,
	            column: 6
	          },
	          end: {
	            line: 194,
	            column: 7
	          }
	        }],
	        line: 191
	      },
	      '15': {
	        loc: {
	          start: {
	            line: 199,
	            column: 4
	          },
	          end: {
	            line: 204,
	            column: 5
	          }
	        },
	        type: 'if',
	        locations: [{
	          start: {
	            line: 199,
	            column: 4
	          },
	          end: {
	            line: 204,
	            column: 5
	          }
	        }, {
	          start: {
	            line: 199,
	            column: 4
	          },
	          end: {
	            line: 204,
	            column: 5
	          }
	        }],
	        line: 199
	      },
	      '16': {
	        loc: {
	          start: {
	            line: 215,
	            column: 4
	          },
	          end: {
	            line: 217,
	            column: 5
	          }
	        },
	        type: 'if',
	        locations: [{
	          start: {
	            line: 215,
	            column: 4
	          },
	          end: {
	            line: 217,
	            column: 5
	          }
	        }, {
	          start: {
	            line: 215,
	            column: 4
	          },
	          end: {
	            line: 217,
	            column: 5
	          }
	        }],
	        line: 215
	      },
	      '17': {
	        loc: {
	          start: {
	            line: 219,
	            column: 55
	          },
	          end: {
	            line: 219,
	            column: 84
	          }
	        },
	        type: 'binary-expr',
	        locations: [{
	          start: {
	            line: 219,
	            column: 55
	          },
	          end: {
	            line: 219,
	            column: 65
	          }
	        }, {
	          start: {
	            line: 219,
	            column: 69
	          },
	          end: {
	            line: 219,
	            column: 79
	          }
	        }, {
	          start: {
	            line: 219,
	            column: 83
	          },
	          end: {
	            line: 219,
	            column: 84
	          }
	        }],
	        line: 219
	      },
	      '18': {
	        loc: {
	          start: {
	            line: 221,
	            column: 4
	          },
	          end: {
	            line: 225,
	            column: 5
	          }
	        },
	        type: 'if',
	        locations: [{
	          start: {
	            line: 221,
	            column: 4
	          },
	          end: {
	            line: 225,
	            column: 5
	          }
	        }, {
	          start: {
	            line: 221,
	            column: 4
	          },
	          end: {
	            line: 225,
	            column: 5
	          }
	        }],
	        line: 221
	      },
	      '19': {
	        loc: {
	          start: {
	            line: 227,
	            column: 4
	          },
	          end: {
	            line: 233,
	            column: 5
	          }
	        },
	        type: 'if',
	        locations: [{
	          start: {
	            line: 227,
	            column: 4
	          },
	          end: {
	            line: 233,
	            column: 5
	          }
	        }, {
	          start: {
	            line: 227,
	            column: 4
	          },
	          end: {
	            line: 233,
	            column: 5
	          }
	        }],
	        line: 227
	      },
	      '20': {
	        loc: {
	          start: {
	            line: 227,
	            column: 8
	          },
	          end: {
	            line: 227,
	            column: 63
	          }
	        },
	        type: 'binary-expr',
	        locations: [{
	          start: {
	            line: 227,
	            column: 8
	          },
	          end: {
	            line: 227,
	            column: 24
	          }
	        }, {
	          start: {
	            line: 227,
	            column: 28
	          },
	          end: {
	            line: 227,
	            column: 36
	          }
	        }, {
	          start: {
	            line: 227,
	            column: 40
	          },
	          end: {
	            line: 227,
	            column: 63
	          }
	        }],
	        line: 227
	      },
	      '21': {
	        loc: {
	          start: {
	            line: 242,
	            column: 55
	          },
	          end: {
	            line: 242,
	            column: 79
	          }
	        },
	        type: 'binary-expr',
	        locations: [{
	          start: {
	            line: 242,
	            column: 55
	          },
	          end: {
	            line: 242,
	            column: 65
	          }
	        }, {
	          start: {
	            line: 242,
	            column: 69
	          },
	          end: {
	            line: 242,
	            column: 79
	          }
	        }],
	        line: 242
	      },
	      '22': {
	        loc: {
	          start: {
	            line: 246,
	            column: 40
	          },
	          end: {
	            line: 246,
	            column: 78
	          }
	        },
	        type: 'binary-expr',
	        locations: [{
	          start: {
	            line: 246,
	            column: 40
	          },
	          end: {
	            line: 246,
	            column: 61
	          }
	        }, {
	          start: {
	            line: 246,
	            column: 65
	          },
	          end: {
	            line: 246,
	            column: 78
	          }
	        }],
	        line: 246
	      },
	      '23': {
	        loc: {
	          start: {
	            line: 249,
	            column: 4
	          },
	          end: {
	            line: 267,
	            column: 5
	          }
	        },
	        type: 'if',
	        locations: [{
	          start: {
	            line: 249,
	            column: 4
	          },
	          end: {
	            line: 267,
	            column: 5
	          }
	        }, {
	          start: {
	            line: 249,
	            column: 4
	          },
	          end: {
	            line: 267,
	            column: 5
	          }
	        }],
	        line: 249
	      },
	      '24': {
	        loc: {
	          start: {
	            line: 269,
	            column: 4
	          },
	          end: {
	            line: 271,
	            column: 5
	          }
	        },
	        type: 'if',
	        locations: [{
	          start: {
	            line: 269,
	            column: 4
	          },
	          end: {
	            line: 271,
	            column: 5
	          }
	        }, {
	          start: {
	            line: 269,
	            column: 4
	          },
	          end: {
	            line: 271,
	            column: 5
	          }
	        }],
	        line: 269
	      },
	      '25': {
	        loc: {
	          start: {
	            line: 269,
	            column: 8
	          },
	          end: {
	            line: 269,
	            column: 69
	          }
	        },
	        type: 'binary-expr',
	        locations: [{
	          start: {
	            line: 269,
	            column: 8
	          },
	          end: {
	            line: 269,
	            column: 36
	          }
	        }, {
	          start: {
	            line: 269,
	            column: 40
	          },
	          end: {
	            line: 269,
	            column: 69
	          }
	        }],
	        line: 269
	      },
	      '26': {
	        loc: {
	          start: {
	            line: 296,
	            column: 4
	          },
	          end: {
	            line: 298,
	            column: 5
	          }
	        },
	        type: 'if',
	        locations: [{
	          start: {
	            line: 296,
	            column: 4
	          },
	          end: {
	            line: 298,
	            column: 5
	          }
	        }, {
	          start: {
	            line: 296,
	            column: 4
	          },
	          end: {
	            line: 298,
	            column: 5
	          }
	        }],
	        line: 296
	      },
	      '27': {
	        loc: {
	          start: {
	            line: 299,
	            column: 4
	          },
	          end: {
	            line: 304,
	            column: 5
	          }
	        },
	        type: 'if',
	        locations: [{
	          start: {
	            line: 299,
	            column: 4
	          },
	          end: {
	            line: 304,
	            column: 5
	          }
	        }, {
	          start: {
	            line: 299,
	            column: 4
	          },
	          end: {
	            line: 304,
	            column: 5
	          }
	        }],
	        line: 299
	      },
	      '28': {
	        loc: {
	          start: {
	            line: 301,
	            column: 6
	          },
	          end: {
	            line: 303,
	            column: 7
	          }
	        },
	        type: 'if',
	        locations: [{
	          start: {
	            line: 301,
	            column: 6
	          },
	          end: {
	            line: 303,
	            column: 7
	          }
	        }, {
	          start: {
	            line: 301,
	            column: 6
	          },
	          end: {
	            line: 303,
	            column: 7
	          }
	        }],
	        line: 301
	      },
	      '29': {
	        loc: {
	          start: {
	            line: 321,
	            column: 2
	          },
	          end: {
	            line: 323,
	            column: 3
	          }
	        },
	        type: 'if',
	        locations: [{
	          start: {
	            line: 321,
	            column: 2
	          },
	          end: {
	            line: 323,
	            column: 3
	          }
	        }, {
	          start: {
	            line: 321,
	            column: 2
	          },
	          end: {
	            line: 323,
	            column: 3
	          }
	        }],
	        line: 321
	      }
	    },
	    s: {
	      '0': 0,
	      '1': 0,
	      '2': 0,
	      '3': 0,
	      '4': 0,
	      '5': 0,
	      '6': 0,
	      '7': 0,
	      '8': 0,
	      '9': 0,
	      '10': 0,
	      '11': 0,
	      '12': 0,
	      '13': 0,
	      '14': 0,
	      '15': 0,
	      '16': 0,
	      '17': 0,
	      '18': 0,
	      '19': 0,
	      '20': 0,
	      '21': 0,
	      '22': 0,
	      '23': 0,
	      '24': 0,
	      '25': 0,
	      '26': 0,
	      '27': 0,
	      '28': 0,
	      '29': 0,
	      '30': 0,
	      '31': 0,
	      '32': 0,
	      '33': 0,
	      '34': 0,
	      '35': 0,
	      '36': 0,
	      '37': 0,
	      '38': 0,
	      '39': 0,
	      '40': 0,
	      '41': 0,
	      '42': 0,
	      '43': 0,
	      '44': 0,
	      '45': 0,
	      '46': 0,
	      '47': 0,
	      '48': 0,
	      '49': 0,
	      '50': 0,
	      '51': 0,
	      '52': 0,
	      '53': 0,
	      '54': 0,
	      '55': 0,
	      '56': 0,
	      '57': 0,
	      '58': 0,
	      '59': 0,
	      '60': 0,
	      '61': 0,
	      '62': 0,
	      '63': 0,
	      '64': 0,
	      '65': 0,
	      '66': 0,
	      '67': 0,
	      '68': 0,
	      '69': 0,
	      '70': 0,
	      '71': 0,
	      '72': 0,
	      '73': 0,
	      '74': 0,
	      '75': 0,
	      '76': 0,
	      '77': 0,
	      '78': 0,
	      '79': 0,
	      '80': 0,
	      '81': 0,
	      '82': 0,
	      '83': 0,
	      '84': 0,
	      '85': 0,
	      '86': 0,
	      '87': 0,
	      '88': 0,
	      '89': 0,
	      '90': 0,
	      '91': 0,
	      '92': 0,
	      '93': 0,
	      '94': 0,
	      '95': 0,
	      '96': 0,
	      '97': 0,
	      '98': 0,
	      '99': 0,
	      '100': 0,
	      '101': 0,
	      '102': 0,
	      '103': 0,
	      '104': 0,
	      '105': 0,
	      '106': 0,
	      '107': 0,
	      '108': 0,
	      '109': 0,
	      '110': 0,
	      '111': 0,
	      '112': 0,
	      '113': 0,
	      '114': 0,
	      '115': 0,
	      '116': 0,
	      '117': 0,
	      '118': 0,
	      '119': 0,
	      '120': 0,
	      '121': 0,
	      '122': 0,
	      '123': 0,
	      '124': 0,
	      '125': 0,
	      '126': 0,
	      '127': 0,
	      '128': 0,
	      '129': 0,
	      '130': 0,
	      '131': 0,
	      '132': 0
	    },
	    f: {
	      '0': 0,
	      '1': 0,
	      '2': 0,
	      '3': 0,
	      '4': 0,
	      '5': 0,
	      '6': 0,
	      '7': 0,
	      '8': 0,
	      '9': 0,
	      '10': 0,
	      '11': 0,
	      '12': 0,
	      '13': 0,
	      '14': 0,
	      '15': 0,
	      '16': 0,
	      '17': 0,
	      '18': 0,
	      '19': 0,
	      '20': 0,
	      '21': 0,
	      '22': 0,
	      '23': 0,
	      '24': 0
	    },
	    b: {
	      '0': [0, 0],
	      '1': [0, 0],
	      '2': [0, 0],
	      '3': [0, 0],
	      '4': [0, 0, 0],
	      '5': [0, 0],
	      '6': [0, 0, 0],
	      '7': [0, 0],
	      '8': [0, 0],
	      '9': [0, 0],
	      '10': [0, 0],
	      '11': [0, 0, 0],
	      '12': [0, 0],
	      '13': [0, 0],
	      '14': [0, 0],
	      '15': [0, 0],
	      '16': [0, 0],
	      '17': [0, 0, 0],
	      '18': [0, 0],
	      '19': [0, 0],
	      '20': [0, 0, 0],
	      '21': [0, 0],
	      '22': [0, 0],
	      '23': [0, 0],
	      '24': [0, 0],
	      '25': [0, 0],
	      '26': [0, 0],
	      '27': [0, 0],
	      '28': [0, 0],
	      '29': [0, 0]
	    },
	    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
	  },
	      coverage = global[gcv] || (global[gcv] = {});

	  if (coverage[path] && coverage[path].hash === hash) {
	    return coverage[path];
	  }

	  coverageData.hash = hash;
	  return coverage[path] = coverageData;
	}();
	var FlashObj = (cov_2gp6hwlpl7.s[0]++, videojs.getComponent('Flash'));
	var defaultDismiss = (cov_2gp6hwlpl7.s[1]++, !videojs.browser.IS_IPHONE);
	var registerPlugin = (cov_2gp6hwlpl7.s[2]++, (cov_2gp6hwlpl7.b[0][0]++, videojs.registerPlugin) || (cov_2gp6hwlpl7.b[0][1]++, videojs.plugin));
	var defaults = (cov_2gp6hwlpl7.s[3]++, {
	  header: '',
	  code: '',
	  message: '',
	  timeout: 45 * 1000,
	  dismiss: defaultDismiss,
	  errors: {
	    '1': {
	      type: 'MEDIA_ERR_ABORTED',
	      headline: 'The video download was cancelled'
	    },
	    '2': {
	      type: 'MEDIA_ERR_NETWORK',
	      headline: 'The video connection was lost, please confirm you are ' + 'connected to the internet'
	    },
	    '3': {
	      type: 'MEDIA_ERR_DECODE',
	      headline: 'The video is bad or in a format that cannot be played on your browser'
	    },
	    '4': {
	      type: 'MEDIA_ERR_SRC_NOT_SUPPORTED',
	      headline: 'This video is either unavailable or not supported in this browser'
	    },
	    '5': {
	      type: 'MEDIA_ERR_ENCRYPTED',
	      headline: 'The video you are trying to watch is encrypted and we do not know how ' + 'to decrypt it'
	    },
	    'unknown': {
	      type: 'MEDIA_ERR_UNKNOWN',
	      headline: 'An unanticipated problem was encountered, check back soon and try again'
	    },
	    '-1': {
	      type: 'PLAYER_ERR_NO_SRC',
	      headline: 'No video has been loaded'
	    },
	    '-2': {
	      type: 'PLAYER_ERR_TIMEOUT',
	      headline: 'Could not download the video'
	    },
	    'PLAYER_ERR_DOMAIN_RESTRICTED': {
	      headline: 'This video is restricted from playing on your current domain'
	    },
	    'PLAYER_ERR_IP_RESTRICTED': {
	      headline: 'This video is restricted at your current IP address'
	    },
	    'PLAYER_ERR_GEO_RESTRICTED': {
	      headline: 'This video is restricted from playing in your current geographic region'
	    },
	    'FLASHLS_ERR_CROSS_DOMAIN': {
	      headline: 'The video could not be loaded: crossdomain access denied.'
	    }
	  }
	});
	cov_2gp6hwlpl7.s[4]++;

	var initPlugin = function initPlugin(player, options) {
	  cov_2gp6hwlpl7.f[0]++;
	  var monitor;
	  var waiting;
	  var isStalling;
	  var listeners = (cov_2gp6hwlpl7.s[5]++, []);
	  cov_2gp6hwlpl7.s[6]++;

	  var updateErrors = function updateErrors(updates) {
	    cov_2gp6hwlpl7.f[1]++;
	    cov_2gp6hwlpl7.s[7]++;
	    options.errors = videojs.mergeOptions(options.errors, updates);
	    cov_2gp6hwlpl7.s[8]++;
	    Object.keys(options.errors).forEach(function (k) {
	      cov_2gp6hwlpl7.f[2]++;
	      var err = (cov_2gp6hwlpl7.s[9]++, options.errors[k]);
	      cov_2gp6hwlpl7.s[10]++;

	      if (!err.type) {
	        cov_2gp6hwlpl7.b[1][0]++;
	        cov_2gp6hwlpl7.s[11]++;
	        err.type = k;
	      } else {
	        cov_2gp6hwlpl7.b[1][1]++;
	      }
	    });
	  };

	  cov_2gp6hwlpl7.s[12]++;
	  updateErrors();
	  cov_2gp6hwlpl7.s[13]++;

	  var resetMonitor = function resetMonitor() {
	    cov_2gp6hwlpl7.f[3]++;
	    cov_2gp6hwlpl7.s[14]++;
	    player.clearTimeout(waiting);
	    cov_2gp6hwlpl7.s[15]++;

	    if (isStalling) {
	      cov_2gp6hwlpl7.b[2][0]++;
	      cov_2gp6hwlpl7.s[16]++;
	      isStalling = false;
	      cov_2gp6hwlpl7.s[17]++;
	      player.removeClass('vjs-waiting');
	    } else {
	      cov_2gp6hwlpl7.b[2][1]++;
	    }

	    cov_2gp6hwlpl7.s[18]++;
	    waiting = player.setTimeout(function () {
	      cov_2gp6hwlpl7.f[4]++;
	      cov_2gp6hwlpl7.s[19]++;

	      if ((cov_2gp6hwlpl7.b[4][0]++, player.error()) || (cov_2gp6hwlpl7.b[4][1]++, player.paused()) || (cov_2gp6hwlpl7.b[4][2]++, player.ended())) {
	        cov_2gp6hwlpl7.b[3][0]++;
	        cov_2gp6hwlpl7.s[20]++;
	        return;
	      } else {
	        cov_2gp6hwlpl7.b[3][1]++;
	      }

	      cov_2gp6hwlpl7.s[21]++;
	      isStalling = true;
	      cov_2gp6hwlpl7.s[22]++;
	      player.addClass('vjs-waiting');
	    }, 1000);
	    cov_2gp6hwlpl7.s[23]++;
	    player.clearTimeout(monitor);
	    cov_2gp6hwlpl7.s[24]++;
	    monitor = player.setTimeout(function () {
	      cov_2gp6hwlpl7.f[5]++;
	      cov_2gp6hwlpl7.s[25]++;

	      if ((cov_2gp6hwlpl7.b[6][0]++, player.error()) || (cov_2gp6hwlpl7.b[6][1]++, player.paused()) || (cov_2gp6hwlpl7.b[6][2]++, player.ended())) {
	        cov_2gp6hwlpl7.b[5][0]++;
	        cov_2gp6hwlpl7.s[26]++;
	        return;
	      } else {
	        cov_2gp6hwlpl7.b[5][1]++;
	      }

	      cov_2gp6hwlpl7.s[27]++;
	      player.error({
	        code: -2,
	        type: 'PLAYER_ERR_TIMEOUT'
	      });
	    }, options.timeout);
	    cov_2gp6hwlpl7.s[28]++;

	    if ((cov_2gp6hwlpl7.b[8][0]++, player.error()) && (cov_2gp6hwlpl7.b[8][1]++, player.error().code === -2)) {
	      cov_2gp6hwlpl7.b[7][0]++;
	      cov_2gp6hwlpl7.s[29]++;
	      player.error(null);
	    } else {
	      cov_2gp6hwlpl7.b[7][1]++;
	    }
	  };

	  cov_2gp6hwlpl7.s[30]++;

	  var cleanup = function cleanup() {
	    cov_2gp6hwlpl7.f[6]++;
	    var listener;
	    cov_2gp6hwlpl7.s[31]++;

	    while (listeners.length) {
	      cov_2gp6hwlpl7.s[32]++;
	      listener = listeners.shift();
	      cov_2gp6hwlpl7.s[33]++;
	      player.off(listener[0], listener[1]);
	    }

	    cov_2gp6hwlpl7.s[34]++;
	    player.clearTimeout(monitor);
	    cov_2gp6hwlpl7.s[35]++;
	    player.clearTimeout(waiting);
	  };

	  cov_2gp6hwlpl7.s[36]++;

	  var healthcheck = function healthcheck(type, fn) {
	    cov_2gp6hwlpl7.f[7]++;
	    cov_2gp6hwlpl7.s[37]++;

	    var check = function check() {
	      cov_2gp6hwlpl7.f[8]++;
	      cov_2gp6hwlpl7.s[38]++;

	      if (!player.error()) {
	        cov_2gp6hwlpl7.b[9][0]++;
	        var tech = (cov_2gp6hwlpl7.s[39]++, player.$('.vjs-tech'));
	        cov_2gp6hwlpl7.s[40]++;

	        if ((cov_2gp6hwlpl7.b[11][0]++, tech) && (cov_2gp6hwlpl7.b[11][1]++, tech.type === 'application/x-shockwave-flash') && (cov_2gp6hwlpl7.b[11][2]++, !tech.vjs_getProperty)) {
	          cov_2gp6hwlpl7.b[10][0]++;
	          cov_2gp6hwlpl7.s[41]++;
	          player.error({
	            code: -2,
	            type: 'PLAYER_ERR_TIMEOUT'
	          });
	          cov_2gp6hwlpl7.s[42]++;
	          return;
	        } else {
	          cov_2gp6hwlpl7.b[10][1]++;
	        }

	        cov_2gp6hwlpl7.s[43]++;

	        if (player.paused()) {
	          cov_2gp6hwlpl7.b[12][0]++;
	          cov_2gp6hwlpl7.s[44]++;
	          return resetMonitor();
	        } else {
	          cov_2gp6hwlpl7.b[12][1]++;
	        }

	        cov_2gp6hwlpl7.s[45]++;

	        if (player.ended()) {
	          cov_2gp6hwlpl7.b[13][0]++;
	          cov_2gp6hwlpl7.s[46]++;
	          return resetMonitor();
	        } else {
	          cov_2gp6hwlpl7.b[13][1]++;
	        }
	      } else {
	        cov_2gp6hwlpl7.b[9][1]++;
	      }

	      cov_2gp6hwlpl7.s[47]++;
	      fn.call(this);
	    };

	    cov_2gp6hwlpl7.s[48]++;
	    player.on(type, check);
	    cov_2gp6hwlpl7.s[49]++;
	    listeners.push([type, check]);
	  };

	  cov_2gp6hwlpl7.s[50]++;

	  var onPlayStartMonitor = function onPlayStartMonitor() {
	    cov_2gp6hwlpl7.f[9]++;
	    var lastTime = (cov_2gp6hwlpl7.s[51]++, 0);
	    cov_2gp6hwlpl7.s[52]++;
	    cleanup();
	    cov_2gp6hwlpl7.s[53]++;
	    resetMonitor();
	    cov_2gp6hwlpl7.s[54]++;
	    healthcheck(['timeupdate', 'adtimeupdate'], function () {
	      cov_2gp6hwlpl7.f[10]++;
	      var currentTime = (cov_2gp6hwlpl7.s[55]++, player.currentTime());
	      cov_2gp6hwlpl7.s[56]++;

	      if (currentTime !== lastTime) {
	        cov_2gp6hwlpl7.b[14][0]++;
	        cov_2gp6hwlpl7.s[57]++;
	        lastTime = currentTime;
	        cov_2gp6hwlpl7.s[58]++;
	        resetMonitor();
	      } else {
	        cov_2gp6hwlpl7.b[14][1]++;
	      }
	    });
	  };

	  cov_2gp6hwlpl7.s[59]++;

	  var onPlayNoSource = function onPlayNoSource() {
	    cov_2gp6hwlpl7.f[11]++;
	    cov_2gp6hwlpl7.s[60]++;

	    if (!player.currentSrc()) {
	      cov_2gp6hwlpl7.b[15][0]++;
	      cov_2gp6hwlpl7.s[61]++;
	      player.error({
	        code: -1,
	        type: 'PLAYER_ERR_NO_SRC'
	      });
	    } else {
	      cov_2gp6hwlpl7.b[15][1]++;
	    }
	  };

	  cov_2gp6hwlpl7.s[62]++;

	  var onErrorHandler = function onErrorHandler() {
	    cov_2gp6hwlpl7.f[12]++;
	    var details = (cov_2gp6hwlpl7.s[63]++, '');
	    var error = (cov_2gp6hwlpl7.s[64]++, player.error());
	    var content = (cov_2gp6hwlpl7.s[65]++, document_1.createElement('div'));
	    var dialogContent = (cov_2gp6hwlpl7.s[66]++, '');
	    cov_2gp6hwlpl7.s[67]++;

	    if (!error) {
	      cov_2gp6hwlpl7.b[16][0]++;
	      cov_2gp6hwlpl7.s[68]++;
	      return;
	    } else {
	      cov_2gp6hwlpl7.b[16][1]++;
	    }

	    cov_2gp6hwlpl7.s[69]++;
	    error = videojs.mergeOptions(error, options.errors[(cov_2gp6hwlpl7.b[17][0]++, error.code) || (cov_2gp6hwlpl7.b[17][1]++, error.type) || (cov_2gp6hwlpl7.b[17][2]++, 0)]);
	    cov_2gp6hwlpl7.s[70]++;

	    if (error.message) {
	      cov_2gp6hwlpl7.b[18][0]++;
	      cov_2gp6hwlpl7.s[71]++;
	      details = "<div class=\"vjs-errors-details\">" + player.localize('Technical details') + "\n        : <div class=\"vjs-errors-message\">" + player.localize(error.message) + "</div>\n        </div>";
	    } else {
	      cov_2gp6hwlpl7.b[18][1]++;
	    }

	    cov_2gp6hwlpl7.s[72]++;

	    if ((cov_2gp6hwlpl7.b[20][0]++, error.code === 4) && (cov_2gp6hwlpl7.b[20][1]++, FlashObj) && (cov_2gp6hwlpl7.b[20][2]++, !FlashObj.isSupported())) {
	      cov_2gp6hwlpl7.b[19][0]++;
	      var flashMessage = (cov_2gp6hwlpl7.s[73]++, player.localize('If you are using an older browser please try upgrading or installing Flash.'));
	      cov_2gp6hwlpl7.s[74]++;
	      details += "<span class=\"vjs-errors-flashmessage\">" + flashMessage + "</span>";
	    } else {
	      cov_2gp6hwlpl7.b[19][1]++;
	    }

	    var display = (cov_2gp6hwlpl7.s[75]++, player.getChild('errorDisplay'));
	    cov_2gp6hwlpl7.s[76]++;
	    content.className = 'vjs-errors-dialog';
	    cov_2gp6hwlpl7.s[77]++;
	    content.id = 'vjs-errors-dialog';
	    cov_2gp6hwlpl7.s[78]++;
	    dialogContent = "<div class=\"vjs-errors-content-container\">\n      <h2 class=\"vjs-errors-headline\">" + this.localize(error.headline) + "</h2>\n        <div><b>" + this.localize('Error Code') + "</b>: " + ((cov_2gp6hwlpl7.b[21][0]++, error.type) || (cov_2gp6hwlpl7.b[21][1]++, error.code)) + "</div>\n        " + details + "\n      </div>";
	    var closeable = (cov_2gp6hwlpl7.s[79]++, display.closeable((cov_2gp6hwlpl7.b[22][0]++, !('dismiss' in error)) || (cov_2gp6hwlpl7.b[22][1]++, error.dismiss)));
	    cov_2gp6hwlpl7.s[80]++;

	    if (closeable) {
	      cov_2gp6hwlpl7.b[23][0]++;
	      cov_2gp6hwlpl7.s[81]++;
	      dialogContent += "<div class=\"vjs-errors-ok-button-container\">\n          <button class=\"vjs-errors-ok-button\">" + this.localize('OK') + "</button>\n        </div>";
	      cov_2gp6hwlpl7.s[82]++;
	      content.innerHTML = dialogContent;
	      cov_2gp6hwlpl7.s[83]++;
	      display.fillWith(content);
	      cov_2gp6hwlpl7.s[84]++;
	      display.contentEl().firstChild.appendChild(display.getChild('closeButton').el());
	      var okButton = (cov_2gp6hwlpl7.s[85]++, display.el().querySelector('.vjs-errors-ok-button'));
	      cov_2gp6hwlpl7.s[86]++;
	      player.on(okButton, 'click', function () {
	        cov_2gp6hwlpl7.f[13]++;
	        cov_2gp6hwlpl7.s[87]++;
	        display.close();
	      });
	    } else {
	      cov_2gp6hwlpl7.b[23][1]++;
	      cov_2gp6hwlpl7.s[88]++;
	      content.innerHTML = dialogContent;
	      cov_2gp6hwlpl7.s[89]++;
	      display.fillWith(content);
	    }

	    cov_2gp6hwlpl7.s[90]++;

	    if ((cov_2gp6hwlpl7.b[25][0]++, player.currentWidth() <= 600) || (cov_2gp6hwlpl7.b[25][1]++, player.currentHeight() <= 250)) {
	      cov_2gp6hwlpl7.b[24][0]++;
	      cov_2gp6hwlpl7.s[91]++;
	      display.addClass('vjs-xs');
	    } else {
	      cov_2gp6hwlpl7.b[24][1]++;
	    }

	    cov_2gp6hwlpl7.s[92]++;
	    display.one('modalclose', function () {
	      cov_2gp6hwlpl7.f[14]++;
	      cov_2gp6hwlpl7.s[93]++;
	      return player.error(null);
	    });
	  };

	  cov_2gp6hwlpl7.s[94]++;

	  var onDisposeHandler = function onDisposeHandler() {
	    cov_2gp6hwlpl7.f[15]++;
	    cov_2gp6hwlpl7.s[95]++;
	    cleanup();
	    cov_2gp6hwlpl7.s[96]++;
	    player.removeClass('vjs-errors');
	    cov_2gp6hwlpl7.s[97]++;
	    player.off('play', onPlayStartMonitor);
	    cov_2gp6hwlpl7.s[98]++;
	    player.off('play', onPlayNoSource);
	    cov_2gp6hwlpl7.s[99]++;
	    player.off('dispose', onDisposeHandler);
	    cov_2gp6hwlpl7.s[100]++;
	    player.off(['aderror', 'error'], onErrorHandler);
	  };

	  cov_2gp6hwlpl7.s[101]++;

	  var reInitPlugin = function reInitPlugin(newOptions) {
	    cov_2gp6hwlpl7.f[16]++;
	    cov_2gp6hwlpl7.s[102]++;
	    onDisposeHandler();
	    cov_2gp6hwlpl7.s[103]++;
	    initPlugin(player, videojs.mergeOptions(defaults, newOptions));
	  };

	  cov_2gp6hwlpl7.s[104]++;

	  reInitPlugin.extend = function (errors) {
	    cov_2gp6hwlpl7.f[17]++;
	    cov_2gp6hwlpl7.s[105]++;
	    return updateErrors(errors);
	  };

	  cov_2gp6hwlpl7.s[106]++;

	  reInitPlugin.getAll = function () {
	    cov_2gp6hwlpl7.f[18]++;
	    cov_2gp6hwlpl7.s[107]++;
	    return videojs.mergeOptions(options.errors);
	  };

	  cov_2gp6hwlpl7.s[108]++;

	  reInitPlugin.timeout = function (timeout) {
	    cov_2gp6hwlpl7.f[19]++;
	    cov_2gp6hwlpl7.s[109]++;

	    if (typeof timeout === 'undefined') {
	      cov_2gp6hwlpl7.b[26][0]++;
	      cov_2gp6hwlpl7.s[110]++;
	      return options.timeout;
	    } else {
	      cov_2gp6hwlpl7.b[26][1]++;
	    }

	    cov_2gp6hwlpl7.s[111]++;

	    if (timeout !== options.timeout) {
	      cov_2gp6hwlpl7.b[27][0]++;
	      cov_2gp6hwlpl7.s[112]++;
	      options.timeout = timeout;
	      cov_2gp6hwlpl7.s[113]++;

	      if (!player.paused()) {
	        cov_2gp6hwlpl7.b[28][0]++;
	        cov_2gp6hwlpl7.s[114]++;
	        onPlayStartMonitor();
	      } else {
	        cov_2gp6hwlpl7.b[28][1]++;
	      }
	    } else {
	      cov_2gp6hwlpl7.b[27][1]++;
	    }
	  };

	  cov_2gp6hwlpl7.s[115]++;

	  reInitPlugin.disableProgress = function () {
	    cov_2gp6hwlpl7.f[20]++;
	  };

	  cov_2gp6hwlpl7.s[116]++;
	  player.on('play', onPlayStartMonitor);
	  cov_2gp6hwlpl7.s[117]++;
	  player.on('play', onPlayNoSource);
	  cov_2gp6hwlpl7.s[118]++;
	  player.on('dispose', onDisposeHandler);
	  cov_2gp6hwlpl7.s[119]++;
	  player.on(['aderror', 'error'], onErrorHandler);
	  cov_2gp6hwlpl7.s[120]++;
	  player.ready(function () {
	    cov_2gp6hwlpl7.f[21]++;
	    cov_2gp6hwlpl7.s[121]++;
	    player.addClass('vjs-errors');
	  });
	  cov_2gp6hwlpl7.s[122]++;

	  if (!player.paused()) {
	    cov_2gp6hwlpl7.b[29][0]++;
	    cov_2gp6hwlpl7.s[123]++;
	    onPlayStartMonitor();
	  } else {
	    cov_2gp6hwlpl7.b[29][1]++;
	  }

	  cov_2gp6hwlpl7.s[124]++;
	  reInitPlugin.VERSION = version;
	  cov_2gp6hwlpl7.s[125]++;
	  player.errors = reInitPlugin;
	};

	cov_2gp6hwlpl7.s[126]++;

	var errors = function errors(options) {
	  cov_2gp6hwlpl7.f[22]++;
	  cov_2gp6hwlpl7.s[127]++;
	  initPlugin(this, videojs.mergeOptions(defaults, options));
	};

	cov_2gp6hwlpl7.s[128]++;
	['extend', 'getAll'].forEach(function (k) {
	  cov_2gp6hwlpl7.f[23]++;
	  cov_2gp6hwlpl7.s[129]++;

	  errors[k] = function () {
	    cov_2gp6hwlpl7.f[24]++;
	    cov_2gp6hwlpl7.s[130]++;
	    videojs.log.warn("The errors." + k + "() method is not available until the plugin has been initialized!");
	  };
	});
	cov_2gp6hwlpl7.s[131]++;
	errors.VERSION = version;
	cov_2gp6hwlpl7.s[132]++;
	registerPlugin('errors', errors);

	var Player = videojs.getComponent('Player');
	var sources = [{
	  src: 'movie.mp4',
	  type: 'video/mp4'
	}, {
	  src: 'movie.webm',
	  type: 'video/webm'
	}];
	QUnit.test('the environment is sane', function (assert) {
	  assert.strictEqual(typeof Array.isArray, 'function', 'es5 exists');
	  assert.strictEqual(typeof sinon, 'object', 'sinon exists');
	  assert.strictEqual(typeof videojs, 'function', 'videojs exists');
	  assert.strictEqual(typeof errors, 'function', 'plugin is a function');
	});
	QUnit.module('videojs-errors', {
	  beforeEach: function beforeEach() {
	    // Mock the environment's timers because certain things - particularly
	    // player readiness - are asynchronous in video.js 5.
	    this.clock = sinon.useFakeTimers();
	    this.fixture = document_1.getElementById('qunit-fixture');
	    this.video = document_1.createElement('video');
	    this.fixture.appendChild(this.video);
	    this.player = videojs(this.video);

	    this.player.buffered = function () {
	      return videojs.createTimeRange(0, 0);
	    };

	    this.player.paused = function () {
	      return false;
	    };

	    this.player.pause = function () {
	      return false;
	    }; // initialize the plugin with the default options


	    this.player.errors();
	    this.errorDisplay = this.player.getChild('errorDisplay'); // Tick forward so the player is ready.

	    this.clock.tick(1);
	  },
	  afterEach: function afterEach() {
	    this.player.dispose();
	    this.clock.restore();
	  }
	});
	QUnit.test('registers itself with video.js', function (assert) {
	  assert.expect(2);
	  assert.strictEqual(typeof Player.prototype.errors, 'function', 'videojs-errors plugin was registered');
	  this.player.errors(); // Tick the clock forward enough to trigger the player to be "ready".

	  this.clock.tick(1);
	  assert.ok(this.player.hasClass('vjs-errors'), 'the plugin adds a class to the player');
	});
	QUnit.test('play() without a src is an error', function (assert) {
	  var errors$$1 = 0;
	  this.player.on('error', function () {
	    errors$$1++;
	  });
	  this.player.trigger('play');
	  assert.strictEqual(errors$$1, 1, 'emitted an error');
	  assert.strictEqual(this.player.error().code, -1, 'error code is -1');
	  assert.strictEqual(this.player.error().type, 'PLAYER_ERR_NO_SRC', 'error type is no source');
	});
	QUnit.test('no progress for 1 second shows the loading spinner', function (assert) {
	  this.player.src(sources);
	  this.player.trigger('play');
	  this.clock.tick(1 * 1000);
	  assert.ok(this.player.hasClass('vjs-waiting'), 'the plugin adds spinner class to the player');
	});
	QUnit.test('progress events while playing reset the spinner', function (assert) {
	  this.player.src(sources);
	  this.player.trigger('play'); // stalled for awhile

	  this.clock.tick(44 * 1000);
	  assert.ok(this.player.hasClass('vjs-waiting'), 'the plugin adds spinner class to the player'); // resume playback

	  this.player.currentTime = function () {
	    return 1;
	  };

	  this.player.trigger('timeupdate');
	  assert.notOk(this.player.hasClass('vjs-waiting'), 'spinner removed');
	});
	QUnit.test('no progress for 45 seconds is an error', function (assert) {
	  var errors$$1 = 0;
	  this.player.on('error', function () {
	    errors$$1++;
	  });
	  this.player.src(sources);
	  this.player.trigger('play');
	  this.clock.tick(45 * 1000);
	  assert.strictEqual(errors$$1, 1, 'emitted an error');
	  assert.strictEqual(this.player.error().code, -2, 'error code is -2');
	  assert.strictEqual(this.player.error().type, 'PLAYER_ERR_TIMEOUT');
	});
	QUnit.test('progress events are ignored during timeout', function (assert) {
	  var errors$$1 = 0;
	  this.player.on('error', function () {
	    errors$$1++;
	  });
	  this.player.src(sources);
	  this.player.trigger('play');
	  this.clock.tick(40 * 1000);
	  this.player.trigger('progress');
	  this.clock.tick(5 * 1000);
	  assert.strictEqual(errors$$1, 1, 'emitted an error');
	  assert.strictEqual(this.player.error().code, -2, 'error code is -2');
	  assert.strictEqual(this.player.error().type, 'PLAYER_ERR_TIMEOUT');
	});
	QUnit.test('Flash API is unavailable when using Flash is an error', function (assert) {
	  this.player.tech_.el_.type = 'application/x-shockwave-flash'; // when Flash dies the object methods go away

	  /* eslint-disable camelcase */

	  this.player.tech_.el_.vjs_getProperty = null;
	  /* eslint-enable camelcase */

	  this.player.paused = function () {
	    return true;
	  };

	  var errors$$1 = 0;
	  this.player.on('error', function () {
	    errors$$1++;
	  });
	  this.player.src(sources);
	  this.player.trigger('play');
	  this.player.trigger('timeupdate');
	  assert.strictEqual(errors$$1, 1, 'emitted an error');
	  assert.strictEqual(this.player.error().code, -2, 'error code is -2');
	  assert.strictEqual(this.player.error().type, 'PLAYER_ERR_TIMEOUT');
	});
	QUnit.test('the plugin cleans up after its previous incarnation when called again', function (assert) {
	  var errors$$1 = 0;
	  this.player.on('error', function () {
	    return errors$$1++;
	  }); // Call plugin multiple times

	  this.player.errors();
	  this.player.errors(); // Tick the clock forward enough to trigger the player to be "ready".

	  this.clock.tick(1);
	  this.player.trigger('play');
	  assert.strictEqual(errors$$1, 1, 'emitted a single error');
	  assert.strictEqual(this.player.error().code, -1, 'error code is -1');
	  assert.strictEqual(this.player.error().type, 'PLAYER_ERR_NO_SRC');
	});
	QUnit.test('when dispose is triggered should not throw error ', function (assert) {
	  this.player.src(sources);
	  this.player.trigger('play');
	  this.player.dispose();
	  this.clock.tick(45 * 1000);
	  assert.ok(!this.player.error(), 'should not throw player error when dispose is called.'); // reset this.player because otherwise afterEach will fail

	  this.fixture.appendChild(this.video);
	  this.player = videojs(this.video);
	});
	QUnit.test('progress does not clear player timeout errors', function (assert) {
	  var errors$$1 = 0;
	  this.player.on('error', function () {
	    errors$$1++;
	  });
	  this.player.src(sources);
	  this.player.trigger('play');
	  this.clock.tick(45 * 1000);
	  assert.strictEqual(errors$$1, 1, 'emitted an error');
	  assert.strictEqual(this.player.error().code, -2, 'error code is -2');
	  assert.strictEqual(this.player.error().type, 'PLAYER_ERR_TIMEOUT');
	  this.player.trigger('progress');
	  assert.strictEqual(this.player.error().code, -2, 'error code is -2');
	});
	QUnit.test('reinitialising plugin during playback starts timeout handler', function (assert) {
	  var errors$$1 = 0;
	  this.player.on('error', function () {
	    errors$$1++;
	  });
	  this.player.src(sources);
	  this.player.trigger('play'); // reinitialise while playing

	  this.player.errors();
	  this.clock.tick(45 * 1000);
	  assert.strictEqual(errors$$1, 1, 'emitted an error');
	  assert.strictEqual(this.player.error().code, -2, 'error code is -2');
	  assert.strictEqual(this.player.error().type, 'PLAYER_ERR_TIMEOUT');
	});
	QUnit.test('timeout can be got and set', function (assert) {
	  assert.strictEqual(this.player.errors.timeout(), 45 * 1000, 'default timeout reported');
	  this.player.errors.timeout(1 * 1000);
	  assert.strictEqual(this.player.errors.timeout(), 1 * 1000, 'timeout was updated');
	});
	QUnit.test('updating timeout during playback restarts timeout monitor', function (assert) {
	  var errors$$1 = 0;
	  this.player.on('error', function () {
	    errors$$1++;
	  });
	  this.player.src(sources);
	  this.player.trigger('play'); // reinitialise while playing

	  this.player.errors.timeout(1000);
	  this.clock.tick(1 * 1000);
	  assert.strictEqual(errors$$1, 1, 'emitted an error');
	  assert.strictEqual(this.player.error().code, -2, 'error code is -2');
	  assert.strictEqual(this.player.error().type, 'PLAYER_ERR_TIMEOUT');
	}); // safari 7 on OSX can emit stalls when playback is just fine

	QUnit.test('stalling by itself is not an error', function (assert) {
	  this.player.src(sources);
	  this.player.trigger('play');
	  this.player.trigger('stalled');
	  assert.ok(!this.player.error(), 'no error fired');
	});
	QUnit.test('timing out multiple times only throws a single error', function (assert) {
	  var errors$$1 = 0;
	  this.player.on('error', function () {
	    errors$$1++;
	  });
	  this.player.src(sources);
	  this.player.trigger('play'); // trigger a player timeout

	  this.clock.tick(45 * 1000);
	  assert.strictEqual(errors$$1, 1, 'one error fired'); // wait long enough for another timeout

	  this.clock.tick(50 * 1000);
	  assert.strictEqual(errors$$1, 1, 'only one error fired');
	});
	QUnit.test('no signs of playback triggers a player timeout', function (assert) {
	  var errors$$1 = 0;
	  this.player.src(sources);
	  this.player.on('error', function () {
	    errors$$1++;
	  }); // swallow any timeupdate events

	  this.player.on('timeupdate', function (event) {
	    event.stopImmediatePropagation();
	  });
	  this.player.trigger('play');
	  this.clock.tick(45 * 1000);
	  assert.strictEqual(errors$$1, 1, 'emitted a single error');
	  assert.strictEqual(this.player.error().code, -2, 'error code is -2');
	  assert.strictEqual(this.player.error().type, 'PLAYER_ERR_TIMEOUT', 'type is player timeout');
	});
	QUnit.test('time changes while playing reset the player timeout', function (assert) {
	  var errors$$1 = 0;
	  this.player.src(sources);
	  this.player.on('error', function () {
	    errors$$1++;
	  });
	  this.player.trigger('play');
	  this.clock.tick(44 * 1000);

	  this.player.currentTime = function () {
	    return 1;
	  };

	  this.player.trigger('timeupdate');
	  this.clock.tick(10 * 1000);
	  assert.strictEqual(errors$$1, 0, 'no error emitted');
	});
	QUnit.test('time changes while playing ads reset the player timeout', function (assert) {
	  var errors$$1 = 0;
	  this.player.src(sources);
	  this.player.on('error', function () {
	    errors$$1++;
	  });
	  this.player.trigger('play');
	  this.clock.tick(44 * 1000);

	  this.player.currentTime = function () {
	    return 1;
	  };

	  this.player.trigger('adtimeupdate');
	  this.clock.tick(10 * 1000);
	  assert.strictEqual(errors$$1, 0, 'no error emitted');
	});
	QUnit.test('time changes after a player timeout clears the error', function (assert) {
	  this.player.src(sources);
	  this.player.trigger('play');
	  this.clock.tick(45 * 1000);

	  this.player.currentTime = function () {
	    return 1;
	  };

	  this.player.trigger('timeupdate');
	  assert.ok(!this.player.error(), 'cleared the timeout');
	});
	QUnit.test('player timeouts do not occur if the player is paused', function (assert) {
	  var errors$$1 = 0;
	  this.player.src(sources);
	  this.player.on('error', function () {
	    errors$$1++;
	  });
	  this.player.on('timeupdate', function (event) {
	    event.stopImmediatePropagation();
	  });
	  this.player.trigger('play'); // simulate a misbehaving player that doesn't fire `paused`

	  this.player.paused = function () {
	    return true;
	  };

	  this.clock.tick(45 * 1000);
	  assert.strictEqual(errors$$1, 0, 'no error emitted');
	}); // video.paused is false at the end of a video on IE11, Win8 RT

	QUnit.test('player timeouts do not occur if the video is ended', function (assert) {
	  var errors$$1 = 0;
	  this.player.src(sources);
	  this.player.on('error', function () {
	    errors$$1++;
	  });
	  this.player.on('timeupdate', function (event) {
	    event.stopImmediatePropagation();
	  });
	  this.player.trigger('play'); // simulate a misbehaving player that doesn't fire `ended`

	  this.player.ended = function () {
	    return true;
	  };

	  this.clock.tick(45 * 1000);
	  assert.strictEqual(errors$$1, 0, 'no error emitted');
	});
	QUnit.test('player timeouts do not overwrite existing errors', function (assert) {
	  this.player.src(sources);
	  this.player.trigger('play');
	  this.player.error({
	    type: 'custom',
	    code: -7
	  });
	  this.clock.tick(45 * 1000);
	  assert.strictEqual(-7, this.player.error().code, 'error was not overwritten');
	});
	QUnit.test('unrecognized error codes do not cause exceptions', function (assert) {
	  var errors$$1 = 0;
	  this.player.on('error', function () {
	    errors$$1++;
	  });
	  this.player.error({
	    code: 'something-custom-that-no-one-could-have-predicted',
	    type: 'NOT_AN_ERROR_CONSTANT'
	  });
	  assert.ok(true, 'does not throw an exception');
	  assert.strictEqual(errors$$1, 1, 'emitted an error'); // intentionally missing properties

	  this.player.error({});
	  assert.ok(true, 'does not throw an exception');
	  assert.strictEqual(errors$$1, 2, 'emitted an error');
	});
	QUnit.test('custom error details should override defaults', function (assert) {
	  var customError = {
	    headline: 'test headline',
	    message: 'test details'
	  }; // initialize the plugin with custom options

	  this.player.errors({
	    errors: {
	      4: customError
	    }
	  }); // tick forward enough to ready the player

	  this.clock.tick(1); // trigger the error in question

	  this.player.error(4); // confirm results

	  assert.strictEqual(this.errorDisplay.$('.vjs-errors-headline').textContent, customError.headline, 'headline should match custom override value');
	  assert.strictEqual(this.errorDisplay.$('.vjs-errors-message').textContent, customError.message, 'message should match custom override value');
	});
	QUnit.test('Append Flash error details when flash is not supported', function (assert) {
	  var Flash = videojs.getTech('Flash'); // vjs6 won't have flash by default

	  if (!Flash) {
	    assert.notOk(Flash, 'flash tech not available, skipping unit test');
	    return;
	  }

	  var oldIsSupported = videojs.getComponent('Flash').isSupported; // Mock up isSupported to be false

	  videojs.getComponent('Flash').isSupported = function () {
	    return false;
	  }; // tick forward enough to ready the player


	  this.clock.tick(1); // trigger the error in question

	  this.player.error(4); // confirm results

	  assert.equal(this.errorDisplay.$('.vjs-errors-flashmessage').textContent, 'If you are using an older browser please try upgrading or installing Flash.', 'Flash Error message should be displayed'); // Restoring isSupported to the old value

	  videojs.getComponent('Flash').isSupported = oldIsSupported;
	});
	QUnit.test('default error is dismissible', function (assert) {
	  // initialize the plugin
	  this.player.errors(); // tick forward enough to ready the player

	  this.clock.tick(1); // trigger the error in question

	  this.player.error(2); // confirm results

	  assert.ok(this.errorDisplay.$('.vjs-errors-ok-button'), 'ok button is present');
	  assert.ok(this.errorDisplay.$('.vjs-close-button'), 'close button is present');
	});
	QUnit.test('custom error is dismissible', function (assert) {
	  var customErrorDismiss = {
	    headline: 'test headline',
	    message: 'test details',
	    dismiss: true
	  }; // initialize the plugin with custom options

	  this.player.errors({
	    errors: {
	      4: customErrorDismiss
	    }
	  }); // tick forward enough to ready the player

	  this.clock.tick(1); // trigger the error in question

	  this.player.error(4); // confirm results

	  assert.ok(this.errorDisplay.$('.vjs-errors-ok-button'), 'ok button is present');
	  assert.ok(this.errorDisplay.$('.vjs-close-button'), 'close button is present');
	});
	QUnit.test('custom error is not dismissible', function (assert) {
	  var customErrorNoDimiss = {
	    headline: 'test headline',
	    message: 'test details',
	    dismiss: false
	  }; // initialize the plugin with custom options

	  this.player.errors({
	    errors: {
	      4: customErrorNoDimiss
	    }
	  }); // tick forward enough to ready the player

	  this.clock.tick(1); // trigger the error in question

	  this.player.error(4); // confirm results

	  assert.ok(!this.errorDisplay.$('.vjs-errors-ok-button'), 'ok button is not present');
	  assert.ok(!this.errorDisplay.$('.vjs-close-button'), 'close button is not present');
	});
	QUnit.test('custom errors can be added at runtime', function (assert) {
	  this.player.errors(); // tick forward enough to ready the player

	  this.clock.tick(1);
	  var error = {
	    '-3': {
	      type: 'TEST',
	      headline: 'test',
	      message: 'test test'
	    }
	  };
	  this.player.errors.extend(error);
	  this.player.error({
	    code: -3
	  });
	  assert.strictEqual(this.player.errorDisplay.$('.vjs-errors-headline').textContent, error['-3'].headline, 'headline should match custom override value');
	  assert.strictEqual(this.player.errorDisplay.$('.vjs-errors-message').textContent, error['-3'].message, 'message should match custom override value');
	});
	QUnit.test('custom errors can be defined without a type at init time', function (assert) {
	  var error = {
	    TEST: {
	      headline: 'test',
	      message: 'test test'
	    }
	  };
	  this.player.errors({
	    errors: error
	  }); // tick forward enough to ready the player

	  this.clock.tick(1);
	  this.player.error({
	    code: 'TEST'
	  });
	  assert.strictEqual(this.player.errorDisplay.$('.vjs-errors-headline').textContent, error.TEST.headline, 'headline should match custom override value');
	  assert.strictEqual(this.player.errorDisplay.$('.vjs-errors-message').textContent, error.TEST.message, 'message should match custom override value');
	});
	QUnit.test('custom errors can be defined without a type at init time', function (assert) {
	  var error = {
	    TEST: {
	      headline: 'test',
	      message: 'test test'
	    }
	  };
	  this.player.errors(); // tick forward enough to ready the player

	  this.clock.tick(1);
	  this.player.errors.extend(error);
	  this.player.error({
	    code: 'TEST'
	  });
	  assert.strictEqual(this.player.errorDisplay.$('.vjs-errors-headline').textContent, error.TEST.headline, 'headline should match custom override value');
	  assert.strictEqual(this.player.errorDisplay.$('.vjs-errors-message').textContent, error.TEST.message, 'message should match custom override value');
	});
	QUnit.test('getAll()', function (assert) {
	  this.player.errors();
	  var errors$$1 = this.player.errors.getAll();
	  assert.strictEqual(errors$$1['1'].type, 'MEDIA_ERR_ABORTED');
	  assert.strictEqual(errors$$1['2'].type, 'MEDIA_ERR_NETWORK');
	  this.player.errors.extend({
	    TEST: {
	      headline: 'test',
	      message: 'test test'
	    }
	  });
	  errors$$1 = this.player.errors.getAll();
	  assert.strictEqual(errors$$1['1'].type, 'MEDIA_ERR_ABORTED');
	  assert.strictEqual(errors$$1['2'].type, 'MEDIA_ERR_NETWORK');
	  assert.strictEqual(errors$$1.TEST.type, 'TEST');
	});

}(videojs,QUnit,sinon));
